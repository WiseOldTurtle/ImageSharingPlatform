name: $(BuildDefinitionName)_$(date:yyyyMMdd)$(rev:.r)

trigger: none

pool:
  vmImage: 'ubuntu-latest'

parameters:
  - name: Action
    displayName: Action
    type: string
    default: 'Plan'
    values:
    - Plan
    - Apply
    - Destroy

variables:
  - group: WiseOldTurtleSP  # Variable group containing SP details
  - group: terraform        # Variable group containing Terraform-related variables
  - name: directories
    value: "networking,webapp"  # Exclude management from this list
  - name: action
    value: ${{ parameters.Action }}

stages:
  # Stage to handle the management folder separately
  - stage: ManagementSetup
    condition: ne('${{ parameters.Action }}', 'Destroy')  # Skip this stage for destroy
    jobs:
      - job: RunManagement
        displayName: 'Run Terraform for Management Folder'
        steps:
          # Install Terraform
          - task: TerraformInstaller@1
            displayName: Install Terraform
            inputs:
              terraformVersion: latest

          # Terraform Init for Management
          - task: TerraformTaskV4@4
            displayName: 'Terraform Init (management)'
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: 'wiseoldturtle-terraform-sp'
              backendAzureRmResourceGroupName: $(backendRGName)
              backendAzureRmStorageAccountName: $(backendStorageAccountName)
              backendAzureRmContainerName: $(backendContainerName)
              backendAzureRmKey: 'management.tfstate'
              workingDirectory: '$(System.DefaultWorkingDirectory)/AzureFunctions/terraform/management'

          # Terraform Plan for Management
          - task: TerraformTaskV4@4
            displayName: 'Terraform Plan (management)'
            condition: eq(variables['Action'], 'Plan')
            inputs:
              provider: 'azurerm'
              command: 'plan'
              workingDirectory: '$(System.DefaultWorkingDirectory)/AzureFunctions/terraform/management'
              environmentServiceNameAzureRM: 'wiseoldturtle-terraform-sp'

          # Terraform Apply for Management
          - task: TerraformTaskV4@4
            displayName: 'Terraform Apply (management)'
            condition: eq(variables['Action'], 'Apply')
            inputs:
              provider: 'azurerm'
              command: 'apply'
              workingDirectory: '$(System.DefaultWorkingDirectory)/AzureFunctions/terraform/management'
              environmentServiceNameAzureRM: 'wiseoldturtle-terraform-sp'

  # Stage for remaining directories
  - stage: DeployRemainingResources
    dependsOn: ManagementSetup
    condition: and(ne('${{ parameters.Action }}', 'Destroy'), succeeded())
    jobs:
      - job: DeployResources
        displayName: 'Deploy Core Resources'
        steps:
          # Install Terraform
          - task: TerraformInstaller@1
            displayName: Install Terraform
            inputs:
              terraformVersion: latest

          # Loop through directories
          - ${{ each dir in split(variables.directories, ',') }}:
            # Terraform Init
            - task: TerraformTaskV4@4
              displayName: 'Terraform Init (${{ dir }})'
              inputs:
                provider: 'azurerm'
                command: 'init'
                backendServiceArm: 'wiseoldturtle-terraform-sp'
                backendAzureRmResourceGroupName: $(backendRGName)
                backendAzureRmStorageAccountName: $(backendStorageAccountName)
                backendAzureRmContainerName: $(backendContainerName)
                backendAzureRmKey: '${{ dir }}.tfstate'
                workingDirectory: '$(System.DefaultWorkingDirectory)/AzureFunctions/terraform/${{ dir }}'

            # Terraform Plan
            - task: TerraformTaskV4@4
              displayName: 'Terraform Plan (${{ dir }})'
              condition: eq(variables['Action'], 'Plan')
              inputs:
                provider: 'azurerm'
                command: 'plan'
                workingDirectory: '$(System.DefaultWorkingDirectory)/AzureFunctions/terraform/${{ dir }}'
                environmentServiceNameAzureRM: 'wiseoldturtle-terraform-sp'
              
            # Terraform Apply
            - task: TerraformTaskV4@4
              displayName: 'Terraform Apply (${{ dir }})'
              condition: eq(variables['Action'], 'Apply')
              inputs:
                provider: 'azurerm'
                command: 'apply'
                workingDirectory: '$(System.DefaultWorkingDirectory)/AzureFunctions/terraform/${{ dir }}'
                environmentServiceNameAzureRM: 'wiseoldturtle-terraform-sp'

  # Stage to destroy resources
  - stage: terraform_destroy
    condition: eq('${{ parameters.Action }}', 'Destroy')
    jobs:
      - job: terraform_destroy
        displayName: 'Destroy Resources'
        steps:
          - task: TerraformInstaller@1
            displayName: 'Install Terraform'
            inputs:
              terraformVersion: 'latest'
          
          # Loop through directories (including management)
          - ${{ each dir in 'management,networking,webapp'.split(',') }}:
            - task: TerraformTaskV4@4
              displayName: 'Terraform Init (${{ dir }})'
              inputs:
                provider: 'azurerm'
                command: 'init'
                backendServiceArm: 'wiseoldturtle-terraform-sp'
                backendAzureRmResourceGroupName: $(backendRGName)
                backendAzureRmStorageAccountName: $(backendStorageAccountName)
                backendAzureRmContainerName: $(backendContainerName)
                backendAzureRmKey: '${{ dir }}.tfstate'
                workingDirectory: '$(System.DefaultWorkingDirectory)/AzureFunctions/terraform/${{ dir }}'

            - task: TerraformTaskV4@4
              displayName: 'Terraform Destroy (${{ dir }})'
              condition: eq(variables['Action'], 'Destroy')
              inputs:
                provider: 'azurerm'
                command: 'destroy'
                backendAzureRmKey: '${{ dir }}.tfstate'
                workingDirectory: '$(System.DefaultWorkingDirectory)/AzureFunctions/terraform/${{ dir }}'
                environmentServiceNameAzureRM: 'wiseoldturtle-terraform-sp'
