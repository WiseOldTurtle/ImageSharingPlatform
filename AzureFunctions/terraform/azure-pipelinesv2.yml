name: $(BuildDefinitionName)_$(date:yyyyMMdd)$(rev:.r)

trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest'

steps:
- checkout: self  # repository checkout

parameters:
  - name: Action
    displayName: Action
    type: string
    default: 'Plan'
    values:
      - Plan
      - Apply
      - Destroy
      - Test

variables:
  - group: WiseOldTurtleSP  # Variable group containing SP details
  - group: terraform        # Variable group containing Terraform-related variables
  - name: directories
    value: "management,webapp,networking"
  - name: action
    value: ${{ parameters.Action }}


stages:
  # Backend Setup
  - stage: BackendSetup
    displayName: 'Setup Terraform Backend'
    jobs:
      - job: SetupBackend
        displayName: 'Run Azure CLI Setup for Backend'
        steps:
          - script: mkdir -p trivy-reports validation-reports
            displayName: "Create Directories for Reports"

          - script: |
              chmod +x ./terraform/scripts/setup.sh
              ./terraform/scripts/setup.sh
            displayName: 'Run Azure CLI Setup Script'

          - script: |
              echo "Backend Resource Group: $backendRGName"
              echo "Backend Storage Account: $backendStorageAccountName"
              echo "Backend Container: $backendContainerName"
            displayName: "Print Environment Variables"

  # Security Scan
  - stage: RunSecurityScan
    displayName: 'Run Security Scans'
    jobs:
      - job: Security
        displayName: 'Run Trivy Vulnerability Scan on Terraform Files'
        steps:
          - task: CmdLine@2
            displayName: 'Install Trivy vulnerability scanner'
            inputs:
              script: |
                sudo apt-get update
                sudo apt-get install rpm -y
                wget https://github.com/aquasecurity/trivy/releases/download/v0.20.0/trivy_0.20.0_Linux-64bit.deb
                sudo dpkg -i trivy_0.20.0_Linux-64bit.deb
                trivy -v

          - task: CmdLine@2
            displayName: 'LOW/MED Severity Trivy Scan'
            inputs:
              script: |
                for file in $(find $(System.DefaultWorkingDirectory)/terraform -name "*.tf"); do
                  trivy config --severity LOW,MEDIUM --exit-code 0 --format json --output trivy-reports/$(basename $file)_lowmed.json "$file"
                done

          - task: CmdLine@2
            displayName: 'HIGH/CRIT Severity Trivy Scan'
            inputs:
              script: |
                for file in $(find $(System.DefaultWorkingDirectory)/terraform -name "*.tf"); do
                  trivy config --severity HIGH,CRITICAL --exit-code 0 --format json --output trivy-reports/$(basename $file)_highcrit.json "$file"
                done

          - task: PublishBuildArtifacts@1
            displayName: 'Publish Trivy Scan Results'
            inputs:
              PathtoPublish: 'trivy-reports'
              ArtifactName: 'TrivyScanResults'
              publishLocation: 'Container'

  # Terraform Validation and Testing
  - stage: TerraformTest
    displayName: 'Test Terraform Code'
    condition: eq('${{ parameters.Action }}', 'Test')
    jobs:
      - job: ValidateAndFmt
        displayName: 'Validate and Format Terraform Code'
        steps:
          - script: mkdir -p validation-reports
            displayName: "Create Directories for Validation Reports"

          - script: |
              chmod +x ./terraform/scripts/terraform_validate.sh
              ./terraform/scripts/terraform_validate.sh
            displayName: 'Run Terraform Validate'

          - script: |
              chmod +x ./terraform/scripts/terraform_fmt.sh
              ./terraform/scripts/terraform_fmt.sh
            displayName: 'Run Terraform Fmt'

          - task: PublishBuildArtifacts@1
            displayName: 'Publish Validation and Fmt Output'
            inputs:
              PathtoPublish: 'validation-reports'
              ArtifactName: 'TerraformValidateFmtReports'
              publishLocation: 'Container'

  # Terraform Plan Stage
  - stage: PlanResources
    displayName: 'Plan Terraform Resources'
    condition: eq('${{ parameters.Action }}', 'Plan')
    jobs:
      - job: PlanTerraform
        displayName: 'Plan Resources'
        steps:
          - task: Cache@2
            displayName: 'Cache Terraform Plugins'
            inputs:
              key: 'terraform|$(TF_WORKING_DIR)'
              path: $(TF_WORKING_DIR)/.terraform
              cacheHitVar: CACHE_RESTORED

          - script: |
              chmod +x scripts/terraform_init.sh
              ./terraform/scripts/terraform_init.sh $backendRGName $backendStorageAccountName $backendContainerName
            displayName: 'Initialize Terraform Backend'

          - script: |
              cd $(System.DefaultWorkingDirectory)/terraform/management
              terraform plan -out=tfplan
            displayName: 'Terraform Plan (management)'

          - ${{ each dir in split(variables.directories, ',') }}:
              - ${{ if ne(variables.dir, 'management') }}:
                - script: |
                    cd $(System.DefaultWorkingDirectory)/terraform/${{ dir }}
                    terraform plan -out=tfplan
                  displayName: 'Terraform Plan (${{ dir }})'

  # Terraform Apply Stage
  - stage: ApplyResources
    displayName: 'Apply Terraform Resources'
    condition: eq('${{ parameters.Action }}', 'Apply')
    jobs:
      - job: ApplyTerraform
        displayName: 'Apply Resources'
        steps:
          - task: Cache@2
            displayName: 'Cache Terraform Plugins'
            inputs:
              key: 'terraform|$(TF_WORKING_DIR)'
              path: $(TF_WORKING_DIR)/.terraform
              cacheHitVar: CACHE_RESTORED

          - script: |
              chmod +x scripts/terraform_init.sh
              ./terraform/scripts/terraform_init.sh $backendRGName $backendStorageAccountName $backendContainerName
            displayName: 'Initialize Terraform Backend'

          - script: |
              cd $(System.DefaultWorkingDirectory)/terraform/management
              terraform apply -auto-approve tfplan
            displayName: 'Terraform Apply (management)'

          - ${{ each dir in split(variables.directories, ',') }}:
              - ${{ if ne(variables.dir, 'management') }}:
                - script: |
                    cd $(System.DefaultWorkingDirectory)/terraform/${{ dir }}
                    terraform apply -auto-approve tfplan
                  displayName: 'Terraform Apply (${{ dir }})'

  # Terraform Destroy Stage
  - stage: DestroyResources
    displayName: 'Destroy Terraform Resources'
    condition: eq('${{ parameters.Action }}', 'Destroy')
    jobs:
      - job: DestroyTerraform
        displayName: 'Destroy Resources'
        steps:
          - task: Cache@2
            displayName: 'Cache Terraform Plugins'
            inputs:
              key: 'terraform|$(TF_WORKING_DIR)'
              path: $(TF_WORKING_DIR)/.terraform
              cacheHitVar: CACHE_RESTORED

          - script: |
              chmod +x scripts/terraform_init.sh
              ./terraform/scripts/terraform_init.sh $backendRGName $backendStorageAccountName $backendContainerName
            displayName: 'Initialize Terraform Backend'

          - script: |
              cd $(System.DefaultWorkingDirectory)/terraform/management
              terraform destroy -auto-approve
            displayName: 'Terraform Destroy (management)'

          - ${{ each dir in split(variables.directories, ',') }}:
              - ${{ if ne(variables.dir, 'management') }}:
                - script: |
                    cd $(System.DefaultWorkingDirectory)/terraform/${{ dir }}
                    terraform destroy -auto-approve
                  displayName: 'Terraform Destroy (${{ dir }})'
