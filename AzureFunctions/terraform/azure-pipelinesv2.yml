name: $(BuildDefinitionName)_$(date:yyyyMMdd)$(rev:.r)

trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest'

parameters:
  - name: Action
    displayName: Action
    type: string
    default: 'Plan'
    values:
      - Plan
      - Apply
      - Destroy
      - Test

variables:
  - group: WiseOldTurtleSP  # Variable group containing SP details
  - group: terraform        # Variable group containing Terraform-related variables
  - name: directories
    value: "management,webapp"  # Directories to loop through
  - name: action
    value: ${{ parameters.Action }}

stages:
  # Terraform Test Stage
  - stage: TerraformTest
    displayName: 'Test Terraform Code'
    condition: and(succeeded(), ne('${{ parameters.Action }}', 'Destroy'))  # Skip if Action is Destroy
    jobs:
      - job: ValidateAndFmt
        displayName: 'Validate and Format Terraform Code'
        steps:
          - checkout: self

          # Loop over directories for validation
          - ${{ each dir in split(variables.directories, ',') }}:
              - script: |
                  echo "Processing directory: $(System.DefaultWorkingDirectory)/AzureFunctions/terraform/${{ dir }}"
                  mkdir -p validation-reports/${{ dir }}
                  chmod +x $(System.DefaultWorkingDirectory)/AzureFunctions/terraform/scripts/terraform_validate.sh
                  $(System.DefaultWorkingDirectory)/AzureFunctions/terraform/scripts/terraform_validate.sh > validation-reports/${{ dir }}/terraform-validate.log
                displayName: 'Run Terraform Validate for ${{ dir }}'
                env:
                  directories: $(directories)
                  WORKING_DIR: $(System.DefaultWorkingDirectory)

          # Publish validation reports as artifacts
          - task: PublishBuildArtifacts@1
            displayName: 'Publish Terraform Validation Reports'
            inputs:
              PathtoPublish: 'validation-reports'
              ArtifactName: 'TerraformValidationReports'
              publishLocation: 'Container'

  # Terraform Plan Stage
  - stage: PlanResources
    displayName: 'Plan Terraform Resources'
    dependsOn: TerraformTest  # Depends on Test stage
    condition: and(succeeded(), eq('${{ parameters.Action }}', 'Plan'))  # Run only for Plan action
    jobs:
      - job: PlanTerraform
        displayName: 'Plan Resources'
        steps:
          - checkout: self

          # Loop over directories for planning
          - ${{ each dir in split(variables.directories, ',') }}:
              - script: |
                  echo "Processing directory: $(System.DefaultWorkingDirectory)/AzureFunctions/terraform/${{ dir }}"
                  mkdir -p plan-reports/${{ dir }}
                  chmod +x $(System.DefaultWorkingDirectory)/AzureFunctions/terraform/scripts/terraform_init.sh
                  $(System.DefaultWorkingDirectory)/AzureFunctions/terraform/scripts/terraform_init.sh $backendRGName $backendStorageAccountName $backendContainerName
                  cd $(System.DefaultWorkingDirectory)/AzureFunctions/terraform/${{ dir }}
                  terraform plan -out=plan-reports/${{ dir }}/tfplan
                displayName: 'Run Terraform Plan for ${{ dir }}'

  # Terraform Apply Stage
  - stage: ApplyResources
    displayName: 'Apply Terraform Resources'
    dependsOn: TerraformTest  # Depends on Test stage
    condition: and(succeeded(), eq('${{ parameters.Action }}', 'Apply'))  # Run only for Apply action
    jobs:
      - job: ApplyTerraform
        displayName: 'Apply Resources'
        steps:
          - checkout: self

          # Loop over directories for applying
          - ${{ each dir in split(variables.directories, ',') }}:
              - script: |
                  echo "Processing directory: $(System.DefaultWorkingDirectory)/AzureFunctions/terraform/${{ dir }}"
                  chmod +x $(System.DefaultWorkingDirectory)/AzureFunctions/terraform/scripts/terraform_init.sh
                  $(System.DefaultWorkingDirectory)/AzureFunctions/terraform/scripts/terraform_init.sh $backendRGName $backendStorageAccountName $backendContainerName
                  cd $(System.DefaultWorkingDirectory)/AzureFunctions/terraform/${{ dir }}
                  terraform apply -auto-approve plan-reports/${{ dir }}/tfplan
                displayName: 'Run Terraform Apply for ${{ dir }}'

  # Terraform Destroy Stage
  - stage: DestroyResources
    displayName: 'Destroy Terraform Resources'
    dependsOn: []  # Destroy does not depend on Test or other stages
    condition: eq('${{ parameters.Action }}', 'Destroy')  # Run only for Destroy action
    jobs:
      - job: DestroyTerraform
        displayName: 'Destroy Resources'
        steps:
          - checkout: self

          # Loop over directories for destroying
          - ${{ each dir in split(variables.directories, ',') }}:
              - script: |
                  echo "Processing directory: $(System.DefaultWorkingDirectory)/AzureFunctions/terraform/${{ dir }}"
                  chmod +x $(System.DefaultWorkingDirectory)/AzureFunctions/terraform/scripts/terraform_init.sh
                  $(System.DefaultWorkingDirectory)/AzureFunctions/terraform/scripts/terraform_init.sh $backendRGName $backendStorageAccountName $backendContainerName
                  cd $(System.DefaultWorkingDirectory)/AzureFunctions/terraform/${{ dir }}
                  terraform destroy -auto-approve
                displayName: 'Run Terraform Destroy for ${{ dir }}'
