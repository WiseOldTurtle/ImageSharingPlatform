name: $(BuildDefinitionName)_$(date:yyyyMMdd)$(rev:.r)

trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest'

parameters:
  - name: Action
    displayName: Action
    type: string
    default: 'Plan'
    values:
      - Plan
      - Apply
      - Destroy
      - Test

variables:
  - group: WiseOldTurtleSP
  - group: terraform
  - name: directories
    value: "management,webapp"

stages:
  # Stage: Setup Backend
  - stage: BackendSetup
    displayName: 'Setup Terraform Backend'
    condition: always()  # Ensure backend setup runs first
    jobs:
      - job: SetupBackend
        displayName: 'Run Azure CLI Setup for Backend'
        steps:
          - checkout: self
          - script: |
              export TF_VAR_client_id=$(TF_VAR_client_id)
              export TF_VAR_client_secret=$(TF_VAR_client_secret)
              export TF_VAR_tenant_id=$(TF_VAR_tenant_id)
              export backendRGName=$(backendRGName)
              export backendStorageAccountName=$(backendStorageAccountName)
              export backendContainerName=$(backendContainerName)
              chmod +x ./AzureFunctions/terraform/scripts/setup.sh
              ./AzureFunctions/terraform/scripts/setup.sh
            displayName: 'Run Backend Setup Script'

  # Stage: Pre-deployment Checks
  - stage: PredeploymentChecks
    displayName: 'Pre-deployment Checks'
    dependsOn: BackendSetup
    condition: ne('${{ parameters.Action }}', 'Destroy')  # Skip for Destroy action
    jobs:
      - job: ValidateAndScan
        displayName: 'Run Validation, Formatting, and Security Scans'
        steps:
          - checkout: self
          # Install Terraform
          - task: TerraformInstaller@0
            displayName: 'Install Terraform'
            inputs:
              terraformVersion: 'latest'

          # Install Trivy and Terraform
          - script: |
              sudo apt-get update
              sudo apt-get install rpm -y
              wget https://github.com/aquasecurity/trivy/releases/download/v0.20.0/trivy_0.20.0_Linux-64bit.deb
              sudo dpkg -i trivy_0.20.0_Linux-64bit.deb
              trivy -v
              echo "Installing Terraform..."
              curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
              echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
              sudo apt-get update && sudo apt-get install terraform
            displayName: 'Install Tools'

          # Run Trivy, Terraform fmt, and validate for each directory
          - ${{ each dir in split(variables.directories, ',') }}:
              - script: |
                  echo "Processing directory: ${{ dir }}"
                  chmod +x $(System.DefaultWorkingDirectory)/AzureFunctions/terraform/scripts/terraform_fmt.sh
                  chmod +x $(System.DefaultWorkingDirectory)/AzureFunctions/terraform/scripts/terraform_validate.sh

                  # Trivy Scan
                  mkdir -p $(Build.ArtifactStagingDirectory)/trivy-reports
                  trivy config --severity LOW,MEDIUM,HIGH,CRITICAL --format json \
                    --output $(Build.ArtifactStagingDirectory)/trivy-reports/${{ dir }}_scan.json \
                    $(System.DefaultWorkingDirectory)/AzureFunctions/terraform/${{ dir }}

                  # Terraform Fmt
                  $(System.DefaultWorkingDirectory)/AzureFunctions/terraform/scripts/terraform_fmt.sh

                  # Terraform Validate
                  $(System.DefaultWorkingDirectory)/AzureFunctions/terraform/scripts/terraform_validate.sh
                displayName: 'Run Trivy, Fmt, and Validate for ${{ dir }}'
                env:
                  directories: $(directories)
                  WORKING_DIR: $(System.DefaultWorkingDirectory)

          # Publish Reports
          - task: PublishBuildArtifacts@1
            displayName: 'Publish Validation and Scan Reports'
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)/trivy-reports'
              ArtifactName: 'PredeploymentReports'
              publishLocation: 'Container'

  # Stage: Terraform Operations
  - stage: TerraformOperations
    displayName: 'Terraform Operations'
    dependsOn: BackendSetup
    condition: or(
      eq('${{ parameters.Action }}', 'Plan'),
      eq('${{ parameters.Action }}', 'Apply'),
      eq('${{ parameters.Action }}', 'Destroy')
      )
    jobs:
    - job: TerraformJob
      displayName: 'Run Terraform Operations'
      steps:
        - checkout: self

        # Install Terraform 
        - task: TerraformInstaller@1
          displayName: 'Install Terraform'
          inputs:
            terraformVersion: 'latest'

        # Loop through directories for Terraform actions
        - ${{ each dir in split(variables.directories, ',') }}:
            - task: TerraformTaskV4@4
              displayName: 'Terraform Init for ${{ dir }}'
              inputs:
                provider: 'azurerm'
                command: 'init'
                backendServiceArm: 'wiseoldturtle-terraform-sp'
                backendAzureRmResourceGroupName: $(backendRGName)
                backendAzureRmStorageAccountName: $(backendStorageAccountName)
                backendAzureRmContainerName: $(backendContainerName)
                backendAzureRmKey: '${{ dir }}.tfstate'
                workingDirectory: '$(System.DefaultWorkingDirectory)/AzureFunctions/terraform/${{ dir }}'

            - ${{ if eq(parameters.Action, 'Plan') }}:
                - task: TerraformTaskV4@4
                  displayName: 'Terraform Plan for ${{ dir }}'
                  inputs:
                    provider: 'azurerm'
                    command: 'plan'
                    workingDirectory: '$(System.DefaultWorkingDirectory)/AzureFunctions/terraform/${{ dir }}'
                    environmentServiceNameAzureRM: 'wiseoldturtle-terraform-sp'

            - ${{ if eq(parameters.Action, 'Apply') }}:
                - task: TerraformTaskV4@4
                  displayName: 'Terraform Apply for ${{ dir }}'
                  inputs:
                    provider: 'azurerm'
                    command: 'apply'
                    workingDirectory: '$(System.DefaultWorkingDirectory)/AzureFunctions/terraform/${{ dir }}'
                    environmentServiceNameAzureRM: 'wiseoldturtle-terraform-sp'

            - ${{ if eq(parameters.Action, 'Destroy') }}:
                - task: TerraformTaskV4@4
                  displayName: 'Terraform Destroy for ${{ dir }}'
                  inputs:
                    provider: 'azurerm'
                    command: 'destroy'
                    workingDirectory: '$(System.DefaultWorkingDirectory)/AzureFunctions/terraform/${{ dir }}'
                    environmentServiceNameAzureRM: 'wiseoldturtle-terraform-sp'
