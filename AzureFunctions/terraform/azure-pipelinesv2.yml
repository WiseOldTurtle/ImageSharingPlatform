name: $(BuildDefinitionName)_$(date:yyyyMMdd)$(rev:.r)

trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest'

parameters:
  - name: Action
    displayName: Action
    type: string
    default: 'Plan'
    values:
      - Plan
      - Apply
      - Destroy
      - Test

variables:
  - group: WiseOldTurtleSP
  - group: terraform
  - name: directories
    value: "management,webapp"

stages:
  # Backend Setup
  - stage: BackendSetup
    displayName: 'Setup Terraform Backend'
    jobs:
      - job: SetupBackend
        displayName: 'Run Azure CLI Setup for Backend'
        steps:
          - checkout: self
          - script: |
              set -e
              chmod +x $(System.DefaultWorkingDirectory)/AzureFunctions/terraform/scripts/setup.sh
              $(System.DefaultWorkingDirectory)/AzureFunctions/terraform/scripts/setup.sh
            displayName: 'Run Azure CLI Setup Script'

  # Run Pre Req Checks
  - stage: PredeploymentChecks
    displayName: 'Pre-deployment Checks'
    condition: ne('${{ parameters.Action }}', 'Destroy')
    jobs:
      - job: SecurityScan
        displayName: 'Run Trivy Security Scans'
        steps:
          - checkout: self
          - script: |
              set -e
              sudo apt-get update
              sudo apt-get install rpm -y
              wget https://github.com/aquasecurity/trivy/releases/download/v0.20.0/trivy_0.20.0_Linux-64bit.deb
              sudo dpkg -i trivy_0.20.0_Linux-64bit.deb
              trivy -v
              mkdir -p $(Build.ArtifactStagingDirectory)/trivy-reports
              for dir in $(System.DefaultWorkingDirectory)/AzureFunctions/terraform/*; do
                if [ -d "$dir" ]; then
                  echo "Running Trivy Scan for $dir"
                  trivy config --severity LOW,MEDIUM,HIGH,CRITICAL --format json \
                    --output $(Build.ArtifactStagingDirectory)/trivy-reports/$(basename $dir)_scan.json "$dir"
                fi
              done
            displayName: 'Run Trivy Scans'
          - task: PublishBuildArtifacts@1
            displayName: 'Publish Trivy Reports'
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)/trivy-reports'
              ArtifactName: 'TrivyReports'

  - stage: TerraformOperations
    displayName: 'Terraform Operations'
    condition: or(
      eq(parameters.Action, 'Plan'),
      eq(parameters.Action, 'Apply'),
      eq(parameters.Action, 'Destroy'),
      eq(parameters.Action, 'Test')
        )
    jobs:
      - job: TerraformJob
        displayName: 'Run Terraform Operations'
        steps:
          - checkout: self

          # Install Terraform
          - task: TerraformInstaller@1
            displayName: 'Install Terraform'
            inputs:
              terraformVersion: latest

          # Make script executable
          - script: |
              chmod +x $(System.DefaultWorkingDirectory)/AzureFunctions/terraform/scripts/terraform_actions.sh
            displayName: 'Prepare Terraform Actions Script'

          # Loop through directories
          - ${{ each dir in split(variables.directories, ',') }}:
              - script: |
                  echo "Processing directory: ${{ dir }}"
                  $(System.DefaultWorkingDirectory)/AzureFunctions/terraform/scripts/terraform_actions.sh \
                    ${{ parameters.Action }} \
                    ${{ dir }} \
                    $(System.DefaultWorkingDirectory)/AzureFunctions/terraform
                displayName: 'Run Terraform ${{ parameters.Action }} for ${{ dir }}'

          # Publish Validation Reports (if Test is Run)
          - ${{ if eq(parameters.Action, 'Test') }}:
              - task: PublishBuildArtifacts@1
                displayName: 'Publish Validation Reports'
                inputs:
                  PathtoPublish: '$(System.DefaultWorkingDirectory)/AzureFunctions/terraform/validation-reports'
                  ArtifactName: 'ValidationReports'
                  publishLocation: 'Container'

          # Publish Plan Reports (if Plan is Run)
          - ${{ if eq(parameters.Action, 'Plan') }}:
              - task: PublishBuildArtifacts@1
                displayName: 'Publish Plan Reports'
                inputs:
                  PathtoPublish: '$(System.DefaultWorkingDirectory)/AzureFunctions/terraform/plan-reports'
                  ArtifactName: 'PlanReports'
                  publishLocation: 'Container'